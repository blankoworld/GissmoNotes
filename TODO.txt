Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-09-30T15:47:02+02:00

====== TODO ======
Created vendredi 30 septembre 2016

Temps estimé actuellement :
* 1 mois pour doc, tests, migration, deleted, API et CHANGELOG
* 1 mois pour l'interface ?

===== Documentation =====

Dans le dossier **help**.

* développeur
* utilisateur (schéma en strate des objets utilisés pour créer une station depuis 0)
* installation (dépendances, etc.)
* migration depuis la 1.8
* TODO: supprimer graphique des états de place et d'équipements
* TODO: info à propos de l'API v2 (quelques exemples ?)

===== Tests =====

* selenium
* simples : affichage d'un formulaire, liste d'éléments
* api : quelques tests d'accès aux éléments de l'API

===== Script Migration =====

* FAIT | créer les nouvelles tables
* FAIT | migrer les données : storage_format + clock_drift à vérifier et migrer
* FAIT | supprimer les anciennes tables (scripts/migration/clean.py)
* voir avec Maxime et Hélène si la base de données tient la route d'un point de vue plateforme instrumentale

===== Production =====

* faire un fichier production_settings.py (qui surcharge settings.py)
* utiliser ce fichier production_settings.py dans le script docker-entrypoint
* vérifier que la Django Debug Toolbar n'apparaît pas
* adapter les permissions de std_user pour accéder à : 
	* station + builts (à l'intérieur de station)
	* interventions
	* equipments
	* channels + installations
* ajouter le support de Sentry à Django afin d'avoir des logs

===== API =====

* [[/project]] ne fonctionne toujours pas : l'enlever ?

===== Interface admin =====

* Place : donner la station à laquelle elle appartient (dans network/admin.py)
* FAIT | Place (migration) : tenter de récupérer longitude, latitude et élevation du site
* FAIT | Place : afficher dans le __str__ la latitude/longitude entre parenthèses ?
* Model : is_network_model à rajouter sur l'interface + UN affichage sur Equipement de Service/IP (comme Gissmo 1.8)
* Model : ajouter les paramètres disponible (en lecture seule) de ce modèle (avec un lien direct vers le paramètre) ?
* Parameter : réduire la liste des paramètres du menu déroulant "Default"
* Equipment : vérifier que service + IP n'apparaît QUE sur les équipements de modèle "is_network_configurable"
* Equipment : add destination + check that you cannot add place and destination at the same time
* Equipment : user current connected user as "Modified by"
* Equipment : add clock_drift and clock_drift_unit, note, purchase_date, vendor, contact and storage_format
* Equipment : Configurations doit pouvoir soit proposer un menu déroulant des possibilités, soit montrer tout en lecture seule et proposer des combinaisons possibles à rajouter
* Document : choisir par défaut l'utilisateur courant/connecté comme Owner
* Intervention : copier le mode opératoire pour avoir l'utilisateur par défaut
* Intervention : copier le mode opératoire pour récupérer l'agency par défaut de l'utilisateur courant
* Intervention : ajouter une action "confirm selected interventions"
* Intervention : ajouter une action "merge selected interventions" qui change l'historique de toutes les tables qui ont cette intervention
* Intervention : ajouter l'historique des changements equipments, place, etc. liés à cette intervention
* Installation : ajouter un champ de recherche sur équipement
* Installation : ajouter un champ de recherche sur place
* Installation : améliorer rapidité d'affichage d'un élément (lors d'un ajout ou d'une modification par exemple)
* Channel : améliorer rapidité d'affichage lors d'un ajout
* Channel : champ de recherche pour Installation
* Channel : champ de recherche pour Station

===== Idées ? =====

* empêcher la suppression d'un quelconque élément en base : 
	* ajouter une colonne "isDeleted"
	* filtrer tous les objets Django dans l'Admin (ou ailleurs) qui ont été marqués comme supprimés
	* modifier le bouton delete de Django pour avoir le comportement d'ajouter simplement "isDeleted" à la ligne
	* QUESTION : comment gère-t-on la suppression en cascade des éléments d'une intervention, des liens en tous genres ?

* empêcher la suppression de : 
	* intervention : car le cas échéant on doit gérer un script pour faire le clustering
	* place : car cela fout en l'air le clustering
* Permettre à l'utilisateur de redéfinir son mot de passe tout seul
* API : 
	* projects : COMMENT afficher les détails du groupe correspondant ?
	* affiner les permissions d'accès aux objets avec Jérôme et Maxime ?
	* mettre les tables d'historique en lecture seule dans l'API
	* tester CHAQUE lien de l'API APRÈS la migration des données => pleins de soucis d'affichage, exemple : places
* CHANGELOG à créer + remplir
* Interface (voir la liste dans le fichier TODO de la branche "experimental") : 
	* utiliser outil interface comme Bootstrap, Google Material Design Lite, etc. (Cf. viewflow.io aussi)
	* intégrer l'outil choisi
	* créer une page d'accueil avec des "tâches" que l'utilisateur voudrait faire (par exemple "Ajouter une station", "Nouveau canal", "Chercher station", etc.)
	* Gérer les interventions : 
		* validation des interventions (seulement si on trouve des utilisateurs)
		* ajout des utilisateurs
		* Comment déplacer des modifications qui ont été un autre jour que celui d'aujourd'hui SI une autre intervention à la même date existe ? (puisque date/place est une contrainte unique ?)
	* changement des états d'équipements et stations
	* QUESTION : tenter des wizard en plusieurs étapes ?
	* ajouter des "autocomplete" pour le choix des places dans les formulaires
	* Créer un objet pour chaque history afin d'accéder à ces informations (en lecture seule sous Django admin pour les interventions)
	* Ajouter les history liés aux interventions sous l'intervention afin d'en lire le contenu ?
* Faire sauter la dépendance à django-leaflet pour la version 2.0
* Gérer les erreurs 400
* Gérer les erreurs 500
* Lier vendor/manufacturer à Agency via un lien ? ou les abandonner ?
